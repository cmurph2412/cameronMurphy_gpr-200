/*
 Author:				Cameron-Murphy
 Class:					GPR-200-01
 Assignment:			Lab 5: Intro to Textures & Image Processing
 Due Date:              10/8/20
*/

// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}




//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

//Rotation Matrix on Y Vector, taken from: https://gist.github.com/onedayitwillmake/3288507
mat4 rotationY( in float angle ) {
	return mat4(	cos(angle),		0,		sin(angle),	0,
			 				0,		1.0,			 0,	0,
					-sin(angle),	0,		cos(angle),	0,
							0, 		0,				0,	1);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

color4 crossFade(in vec4 tex1, in vec4 tex2)
{
    float mixAmount = (cos(iTime) / 2.0) + 0.5;
    return mix(tex1, tex2, mixAmount);
}

//Distorts the texture
void distortionEffect(out sCoord loc, in float waveSpeed, in float waveHeight, in float textureSpeed)
{
    loc.y = loc.y + sin((loc.x + iTime * waveSpeed) * waveHeight) / waveHeight; //Uses sin wave to create waves
    loc.x = loc.x + iTime * textureSpeed; //Moves textures with time
}

//Point light struct (taken from my lab 4)
struct sPointLight
{
    vec4 center;
    vec4 color;
    float intensity;
};

//Initiates point light object (taken from my lab 4)
bool initLight(out sPointLight light, in vec3 center, in vec3 color, in float intensity)
{
	light.center = asPoint(center);
    light.color = asPoint(color);
    light.intensity = intensity;
    return true;
}

//Implements lighting into textures (Built off of my lab 4)
color4 lightingShading(in sCoord loc, in sPointLight light, in sampler2D iChannel0)
{
    //Calculates position and normals
    vec3 position = vec3(loc, -1.0);
    vec3 normal = normalize(vec3(loc, 1.0));
    
    //Calculates diffuse intensity using previous formula
    vec4 lightVector = normalize(light.center - asPoint(position));
    float pointDistance = distance(asPoint(position), light.center);
    float attenuatedIntensity = 1.0 / (1.0 + pointDistance / light.intensity + (pointDistance * pointDistance) / (light.intensity * light.intensity));
    float diffuseIntensity = max(0.0, dot(lightVector, asPoint(normal)));
    
    return texture(iChannel0, loc) * diffuseIntensity * light.color;
}

//Rotate around cube map dependent on ray
color4 cubeMap(in sRay ray, in samplerCube channel2)
{
    ray.direction = ray.direction * rotationY(iTime); //Rotate ray direction based on time
    //distortionEffect(ray.direction.xy, 0.1, 10.0, 0.25);  //Distortion not working on the ray
    return texture(channel2, ray.direction.xyz); //Returns calculated texture
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    //Determining location of pixel
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res;
    loc = ratio * loc;// + iTime; // zoom + shift
    
    //Cross Fade effect
    //return crossFade(texture(iChannel0, loc), texture(iChannel1, loc));
    
    //Distortion effect
    //distortionEffect(loc, 0.1, 10.0, 0.25);
    //return texture(iChannel0, loc);
    
    //Light Effect
    //sPointLight light;
    //initLight(light, vec3(7.0, 5.0, 0.25), vec3(1.0, 1.0, 1.0), 1.0);
    //return lightingShading(loc, light, iChannel0);
    
    //Cube Map Effect
    //return cubeMap(ray, iChannel2);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
