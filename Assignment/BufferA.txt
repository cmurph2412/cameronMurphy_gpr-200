/*
 Author:				Cameron-Murphy
 Class:					GPR-200-01
 Assignment:			Midterm
 Due Date:              10/29/20
*/

// CALCULATES LIGHTING FOR SCENE

//Point light struct (taken from my lab 4)
struct sPointLight
{
    vec4 center;
    vec4 color;
    float intensity;
};

//Initiates point light object (taken from my lab 4)
bool initLight(out sPointLight light, in vec3 center, in vec3 color, in float intensity)
{
	light.center = asPoint(center);
    light.color = asPoint(color);
    light.intensity = intensity;
    return true;
}

//Implements lighting into textures (Built off of my lab 4)
color4 lightingShading(in sCoord loc, in sPointLight light, in sampler2D channel, in sViewport vp)
{
    //Calculates position and normals
    vec3 position = vec3(loc, 0.5);
    vec3 normal = normalize(vec3(vp.viewportPoint.xy, 1.0));
    
    //Calculates diffuse intensity using previous formula
    vec4 lightVector = normalize(light.center - asPoint(position));
    float pointDistance = distance(asPoint(position), light.center);
    float attenuatedIntensity = 1.0 / (1.0 + pointDistance / light.intensity + (pointDistance * pointDistance) / (light.intensity * light.intensity));
    float diffuseIntensity = cos(dot(normal, lightVector.xyz)) * attenuatedIntensity;
    
    //Returns light with channel (channel is buffer B)
    return texture(channel, loc) * diffuseIntensity * light.color;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    //Determining location of pixel
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res;
    loc = ratio * loc;// + iTime; // zoom + shift
    
    //Defining Light Values
    vec3 lightPos = vec3(0.5, 0.5, 0.25);
    vec3 lightColor = vec3(vec3(1.0, sin(iTime) * 0.2 + 1.0, sin(iTime + 3.14) * 0.2 + 1.0));
    float lightIntensity = sin(iTime) * 4.0 + 4.0;
    
    //Creating Light
    sPointLight light;
    initLight(light, lightPos, lightColor, lightIntensity);
    return lightingShading(loc, light, iChannel0, vp);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
