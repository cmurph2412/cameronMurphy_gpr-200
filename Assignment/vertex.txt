#version 300 es
//#version 450

//Main Duty
//eg. 3D position in space
//eg. uv: texture coordinate
//eg. normal

layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec4 aTexCoord;

uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//Varying
//Per-Vertex: final color
//out vec4 vColor;

//Per-Fragment: individual components
out vec4 vNormal;
out vec4 vTexCoord;

void main()
{
	//Required: set this value
	//problem: gl_position is in clip-space
	//problem: aPosition is in object-space
	
	//position in world space
	//vec4 pos-world = uModelMat * aPosition;
	//gl_Position = pos_world;

	//position in camera space
	//vec4 pos_camera = uViewMat * pos_world
	//vec4 pos_camera = uViewMat * uModelMat * aPosition;
	//gl_Position = pos_camera

	//Position in clip space (correct)
	//vec4 pos_clip = uViewProjMat * pos_world;
	//vec4 pos_clip = uProjMat * uViewMat * uModelMat * aPosition;

	//Final Position Pipeline
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_camera = modelViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_camera;
	gl_Position = pos_clip;

	//Normal Pipeline
	//mat4 normalMatrix = inverse(transpose(modelViewMat));
	//vec4 norm_camera = modelViewMat * vec4(aNormal, 0.0);
	//vec3 norm_camera3 = mat3(modelViewMat) * aNormal;
	mat3 normalMatrix = transpose(inverse(mat3(modelViewMat)));
	vec3 norm_camera = normalMatrix * aNormal;
	
	//TexCoord Pipeline
	mat4 atlasMat = mat4(0.5, 0.0, 0.0, 0.0,
						 0.0, 0.5, 0.0, 0.0,
						 0.0, 0.0, 1.0, 0.0,
						 0.25, 0.25, 0.0, 1.0); //0.25 position, 0.5 scale
	vec4 uv_atlas = atlasMat * aTexCoord;

	//Per-Vertex Output
	//vColor = vec4(aNormal * 0.5 + 0.5, 1.0);
	
	//Per-Fragment Outputs
	//vNormal = vec4(aNormal, 0.0);
	vNormal = vec4(norm_camera, 0.0);
	vTexCoord = uv_atlas;
	
	//gl_Position = uProjMat * modelViewMat * aTexCoord;
}