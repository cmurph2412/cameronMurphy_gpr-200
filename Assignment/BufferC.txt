/*
 Author:				Cameron-Murphy
 Class:					GPR-200-01
 Assignment:			Midterm
 Due Date:              10/29/20
*/

//Structure for circle object
struct sCircle
{
    vec2 origin;
    float radius;
};

//Initializes circle object
void initCircle(out sCircle circle, in vec2 origin, in float radius)
{
    circle.origin = origin;
    circle.radius = radius;
}

//Determines if circle is hit
bool hitCircle(sCircle circle, sCoord loc)
{
    return distance(loc, circle.origin) < circle.radius;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    //Determining location of pixel
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res;
    loc = ratio * loc;// + iTime; // zoom + shift
    
    //Initializes circle
    sCircle circle;
    initCircle(circle, vec2(0.55, 0.5), sin(iTime) + 0.5); //Circle changes size with sin
    
    //If circle is hit returns channel0
    if(hitCircle(circle, loc))
    {
        return texture(iChannel0, loc);
    }
    
    //If circle isn't hit returns channel1
    return texture(iChannel1, loc);
}

//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}