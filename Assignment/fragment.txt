#version 300 es
//#version 450

#ifdef GL_ES
precision highp float;
#endif

layout (location = 0) out vec4 rtFragColor;

/*
//Point light struct
struct sPointLight
{
    vec4 center;
    vec4 color;
    float intensity;
};

//Initiates point light object
void initLight(out sPointLight light, in vec4 center, in vec4 color, in float intensity)
{
	light.center = center;
    light.color = color;
    light.intensity = intensity;
}

vec4 calculateLighting(in sPointLight light, in vec4 position, in vec4 normal, in vec4 baseColor)
{
	vec4 viewportPos = vec4(0.0);
	vec4 specularReflectionColor = vec4(1.0, 1.0, 1.0, 1.0);
	vec4 globalAmbientColor = vec4(1.0, 0.0, 0.0, 1.0);
	float globalLightIntensity = 0.01;

	vec4 lightVector = normalize(light.center - position);
	float pointDistance = distance(position, light.center);
	float attenuatedIntensity = 1.0 / (1.0 + pointDistance / light.intensity + (pointDistance * pointDistance) / (light.intensity * light.intensity));
    float diffuseIntensity = max(0.0, dot(lightVector, normal));
    
    float highlightExponent = 20.0;
    float higherExponent = highlightExponent * 4.0;
    vec4 reflectedLightVector = reflect(-lightVector, normal);
    
    vec4 viewVector = normalize(viewportPos - position);
    float specularCoeffecient = max(0.0, dot(viewVector, reflectedLightVector)); 
            
    //Phong
    float specularIntensity = pow(specularCoeffecient, highlightExponent);
            
    //Bling-Phong
    float halfwayVector = dot(normal, normalize(lightVector + viewVector));
    //float specularIntensity = pow(halfwayVector, higherExponent); //BLINN-PHONG
            
    //Adds value to the color variable
    vec4 colorVariable = (diffuseIntensity * baseColor + specularIntensity * specularReflectionColor) * light.color;
    
    return globalLightIntensity * globalAmbientColor + colorVariable;
}
*/



//Per-Fragment: individual components
in vec4 vNormal;
in vec4 vTexCoord;

//Per-Vertex
in vec4 vColor;

void main()
{
	//Per-Vertex
	rtFragColor = vColor;
	
	//Per Fragment
	//vec4 N = normalize(vNormal);
	/*
	sPointLight light;
	initLight(light, vec4(0.0, 1.0, 1.5, 1.0), vec4(0.75, 0.75, 1.0, 0.0), 5.0 );
	vec4 position = vec4(0.0, 0.0, 0.0, 1.0);
	*/
	
	//rtFragColor = calculateLighting(light, position, N, vTexCoord);
	//rtFragColor = vec4(N.xyz * 0.5 + 0.5, 1.0);
	//rtFragColor = tex(earth_dm.png, vTexCoord);
	//rtFragColor = vTexCoord;
}