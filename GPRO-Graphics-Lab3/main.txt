/*
 Author:				Cameron-Murphy
 Class:					GPR-200-01
 Assignment:			Lab 3: Fragment Shaders & Parallelization
 Due Date:              9/24/20
*/

// Started with code taken from Daniel Buckstein

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

//determines units vector
vec3 unitVector(in vec3 v)
{
    return v / sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
}

// defining infinity (taken from https://stackoverflow.com/questions/16069959/glsl-how-to-ensure-largest-possible-float-value-without-overflow/26846091)
const float infinity = intBitsToFloat(2139095039);

// stores data based on how object is hit
struct hitRecord
{
    vec3 p; //point
    vec3 normal; //normal color
    float t;
    
    bool frontFace; //determines if a front face is hit
    bool hit; //returns true if hit
};
    
// sets normal based on how object is hit
hitRecord setFaceNormal(in vec3 rayDirection, in vec3 outwardNormal, out hitRecord rec)
{
    rec.frontFace = dot(rayDirection, outwardNormal) < 0.0; //determines if it is fron face
    rec.normal = rec.frontFace ? outwardNormal: -outwardNormal; //calculates the normal based on data
    return rec;
}
   
// stores attributes of a sphere
struct sphere
{
    vec3 center; //center point of the sphere
    float radius; //radius of the sphere
};
    
// determines if sphere is hit
hitRecord hitSphere(in sphere s, in vec3 rayDirection, in vec3 rayOrigin, float tMin, float tMax, hitRecord rec)
{
    // defining variables used for calculation
    vec3 oc = rayOrigin - s.center;
    float a = dot(rayDirection, rayDirection);
    float halfB = dot(oc, rayDirection);
    float c = dot(oc, oc) - s.radius * s.radius;
    float discriminant = halfB * halfB - a * c;
    
    // if discriminant above 0 it has hit
    if(discriminant > 0.0)
    {
        float root = sqrt(discriminant);
        
        //Calculates hit based on sphere surface normal equation
        float temp = (-halfB - root) / a;
        if(temp < tMax && temp > tMin)
        {
            rec.t = temp;
            rec.p = rayOrigin + rec.t * rayDirection;
            vec3 outwardNormal = (rec.p - s.center) / s.radius;
            rec = setFaceNormal(rayDirection, outwardNormal, rec);
            rec.hit = true;
            return rec;
        }
        temp = (-halfB + root) / a;
        if (temp < tMax && temp > tMin)
        {
            rec.t = temp;
            rec.p = rayOrigin + rec.t * rayDirection;
            vec3 outwardNormal = (rec.p - s.center) / s.radius;
            rec = setFaceNormal(rayDirection, outwardNormal, rec);
            rec.hit = true;
            return rec;
        }
    }
    
    // returns hit as false if has not hit
    rec.hit = false;
    return rec;
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // defining hit record
    hitRecord rec;
    
    // defining the first sphere (one in front)
    sphere s1;
    s1.center = vec3(0.0, 0.0, -1.0);
    s1.radius = 0.5;
    
    // determines if sphere hit
    rec = hitSphere(s1, rayDirection.xyz, rayOrigin.xyz, 0.0, infinity, rec);
    
    //if the sphere is hit, returns normal based on position on the object
    if(rec.hit)
    {
        return vec4(0.5 * (rec.normal + vec3(1.0, 1.0, 1.0)), 1.0);
    }
    
    // defining the second sphere (ground)
    sphere s2;
    s2.center = vec3(0.0, -100.5, -1.0);
    s2.radius = 100.0;
    
    //determines if second sphere is hit
    rec = hitSphere(s2, rayDirection.xyz, rayOrigin.xyz, 0.0, infinity, rec);
    
    //if the sphere is hit, returns normal based on position on the object
    if(rec.hit)
    {
        //return vec4(0.5, 1.0, 0.5, 1.0);
        return vec4(0.5 * (rec.normal + vec3(1.0, 1.0, 1.0)), 1.0);
    }
    
    //Creates blue and white gradient
    float t = 0.5 * (rayDirection.y + 1.0);
    return vec4((1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0), 1.0);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
    
    // color
    fragColor = calcColor(rayDirection, rayOrigin);
}
